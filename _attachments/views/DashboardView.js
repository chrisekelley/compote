// Generated by CoffeeScript 1.4.0
var DashboardView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DashboardView = (function(_super) {

  __extends(DashboardView, _super);

  function DashboardView() {
    this.render = __bind(this.render, this);

    this.update = __bind(this.update, this);
    return DashboardView.__super__.constructor.apply(this, arguments);
  }

  DashboardView.prototype.initialize = function() {
    return $("html").append("      <link href='js-libraries/Leaflet/leaflet.css' type='text/css' rel='stylesheet' />      <script type='text/javascript' src='js-libraries/Leaflet/leaflet.js'></script>      <script type='text/javascript'>      function toggle(div1) {          var el = document.getElementById(div1);          if (el.style.display != '')          {              el.style.display = '';          } else {              el.style.display = 'none';          }      }      </script>      <style>        .dissaggregatedResults{          display: none;        }      </style>    ");
  };

  DashboardView.prototype.el = '#content';

  DashboardView.prototype.update = function() {
    var reportOptions, url;
    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return "" + key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  DashboardView.prototype.render = function(options) {
    this.reportType = options.reportType || "results";
    this.startDate = options.startDate || moment(new Date).subtract('days', 30).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    this.$el.html("    <style>      table.results th.header, table.results td{        font-size:150%;      }    </style>    <table id='reportOptions'></table>    ");
    this[this.reportType]();
    $('div[data-role=fieldcontain]').fieldcontain();
    $('select').selectmenu();
    return $('input[type=date]').datebox({
      mode: "calbox"
    });
  };

  DashboardView.prototype.hierarchyOptions = function(locationType, location) {
    if (locationType === "region") {
      return _.keys(WardHierarchy.hierarchy);
    }
    return _.chain(WardHierarchy.hierarchy).map(function(value, key) {
      if (locationType === "district" && location === key) {
        return _.keys(value);
      }
      return _.map(value, function(value, key) {
        if (locationType === "constituan" && location === key) {
          return _.keys(value);
        }
        return _.map(value, function(value, key) {
          if (locationType === "shehia" && location === key) {
            return value;
          }
        });
      });
    }).flatten().compact().value();
  };

  DashboardView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;
    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  DashboardView.prototype.formFilterTemplate = function(options) {
    return "        <tr>          <td>            <label style='display:inline' for='" + options.id + "'>" + options.label + "</label>           </td>          <td style='width:150%'>            " + options.form + "            </select>          </td>        </tr>    ";
  };

  DashboardView.prototype.viewQuery = function(options) {
    var results;
    results = new DashboardCollection();
    return results.fetch({
      question: $('#selected-question').val(),
      isComplete: true,
      include_docs: true,
      success: function() {
        results.fields = {};
        results.each(function(result) {
          return _.each(_.keys(result.attributes), function(key) {
            if (!_.contains(["_id", "_rev", "question"], key)) {
              return results.fields[key] = true;
            }
          });
        });
        results.fields = _.keys(results.fields);
        return options.success(results);
      }
    });
  };

  DashboardView.prototype.results = function() {
    var _this = this;
    this.$el.append("      <table id='results' class='tablesorter'>        <thead>        </thead>        <tbody>        </tbody>      </table>    ");
    return this.viewQuery({
      success: function(results) {
        var currentEnumerator, e, endDate, enumeratorTDs, enumeratorVisitsPerDay, headerVisitDate, headerVisitDates, headerVisitDatesTH, hiddenInfoPerDay, s, startDate, tableData, visitDate, visitDates, _i, _len;
        tableData = results.map(function(result) {
          return _.map(results.fields, function(field) {
            return result.get(field);
          });
        });
        startDate = null;
        endDate = null;
        results.each(function(row) {
          var timestamp;
          timestamp = row.get('timestamp');
          if (startDate !== null && timestamp < startDate) {
            startDate = timestamp;
          } else if (endDate !== null && timestamp > endDate) {
            endDate = timestamp;
          }
          if (startDate === null) {
            startDate = timestamp;
          }
          if (endDate === null) {
            return endDate = timestamp;
          }
        });
        s = new Date(startDate);
        e = new Date(endDate);
        visitDates = [];
        visitDates.push(new Date(startDate));
        while (s < e) {
          visitDates.push(s);
          s = new Date(s.setDate(s.getDate() + 1));
        }
        headerVisitDates = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = visitDates.length; _i < _len; _i++) {
            visitDate = visitDates[_i];
            _results.push($.format.date(visitDate, "dd/MM/yyyy"));
          }
          return _results;
        })();
        headerVisitDatesTH = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = headerVisitDates.length; _i < _len; _i++) {
            headerVisitDate = headerVisitDates[_i];
            _results.push("<th class=\"header\">" + headerVisitDate + "</th>");
          }
          return _results;
        })();
        $("table#results thead").append("<tr><th class=\"header\">Enumerator</th>" + headerVisitDatesTH + "</tr>");
        currentEnumerator = null;
        enumeratorVisitsPerDay = {};
        enumeratorTDs = "";
        hiddenInfoPerDay = {};
        results.each(function(row) {
          var assessmentId, id, timestamp, timestampDateFmt, _i, _len;
          timestamp = row.get('timestamp');
          timestampDateFmt = $.format.date(new Date(timestamp), "dd/MM/yyyy");
          id = row.get('_id');
          assessmentId = row.get('assessmentId');
          if (currentEnumerator !== row.get('enumerator')) {
            if (currentEnumerator === null) {
              currentEnumerator = row.get('enumerator');
              enumeratorVisitsPerDay[timestampDateFmt] = 1;
              hiddenInfoPerDay[timestampDateFmt] = timestampDateFmt + " : " + assessmentId + "<br/>\n";
              return enumeratorTDs = "<tr><td>" + currentEnumerator + "</td>";
            } else {
              for (_i = 0, _len = headerVisitDates.length; _i < _len; _i++) {
                headerVisitDate = headerVisitDates[_i];
                if (enumeratorVisitsPerDay[headerVisitDate] !== void 0) {
                  enumeratorTDs = enumeratorTDs + "<td id=\"" + currentEnumerator + headerVisitDate + "\" onClick=\"toggle('hidden_" + currentEnumerator + headerVisitDate + "')\">" + enumeratorVisitsPerDay[headerVisitDate] + "<span id=\"hidden_" + currentEnumerator + headerVisitDate + "\" style=\"display: none;\"><br/>" + hiddenInfoPerDay[headerVisitDate] + "</span></td>";
                } else {
                  enumeratorTDs = enumeratorTDs + "<td id=\"" + currentEnumerator + headerVisitDate + "\">0</td>";
                }
              }
              $("table#results tbody").append(enumeratorTDs);
              enumeratorTDs = "";
              enumeratorVisitsPerDay = {};
              hiddenInfoPerDay = {};
              currentEnumerator = row.get('enumerator');
              enumeratorTDs = "<tr><td>" + currentEnumerator + "</td>";
              hiddenInfoPerDay[timestampDateFmt] = timestampDateFmt + " : " + assessmentId + "<br/>\n";
              if (enumeratorVisitsPerDay[timestampDateFmt] === void 0) {
                return enumeratorVisitsPerDay[timestampDateFmt] = 1;
              } else {
                return enumeratorVisitsPerDay[timestampDateFmt] = enumeratorVisitsPerDay[timestampDateFmt] + 1;
              }
            }
          } else {
            if (hiddenInfoPerDay[timestampDateFmt] === void 0) {
              hiddenInfoPerDay[timestampDateFmt] = timestampDateFmt + " : " + assessmentId + "<br/>\n";
            } else {
              hiddenInfoPerDay[timestampDateFmt] = hiddenInfoPerDay[timestampDateFmt] + timestampDateFmt + " : " + assessmentId + "<br/>\n";
            }
            if (enumeratorVisitsPerDay[timestampDateFmt] === void 0) {
              return enumeratorVisitsPerDay[timestampDateFmt] = 1;
            } else {
              return enumeratorVisitsPerDay[timestampDateFmt] = enumeratorVisitsPerDay[timestampDateFmt] + 1;
            }
          }
        });
        for (_i = 0, _len = headerVisitDates.length; _i < _len; _i++) {
          headerVisitDate = headerVisitDates[_i];
          if (enumeratorVisitsPerDay[headerVisitDate] !== void 0) {
            enumeratorTDs = enumeratorTDs + "<td id=\"" + currentEnumerator + headerVisitDate + "\" onClick=\"toggle('hidden_" + currentEnumerator + headerVisitDate + "')\">" + enumeratorVisitsPerDay[headerVisitDate] + "<span id=\"hidden_" + currentEnumerator + headerVisitDate + "\" style=\"display: none;\"><br/>" + hiddenInfoPerDay[headerVisitDate] + "</span></td>";
          } else {
            enumeratorTDs = enumeratorTDs + "<td id=\"" + currentEnumerator + headerVisitDate + "\">0</td>";
          }
        }
        $("table#results tbody").append(enumeratorTDs);
        return _.each($('table tr'), function(row, index) {
          if (index % 2 === 1) {
            return $(row).addClass("odd");
          }
        });
      }
    });
  };

  return DashboardView;

})(Backbone.View);
