// Generated by CoffeeScript 1.4.0
var Coconut, Router,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Router = (function(_super) {

  __extends(Router, _super);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "": "default",
    "reports": "default"
  };

  Router.prototype.route = function(route, name, callback) {
    var _this = this;
    Backbone.history || (Backbone.history = new Backbone.History);
    if (!_.isRegExp(route)) {
      route = this._routeToRegExp(route);
    }
    return Backbone.history.route(route, function(fragment) {
      var args;
      args = _this._extractParameters(route, fragment);
      callback.apply(_this, args);
      $('#loading').slideDown();
      _this.trigger.apply(_this, ['route:' + name].concat(args));
      return $('#loading').fadeOut();
    }, this);
  };

  Router.prototype["default"] = function(options) {
    var reportViewOptions, _ref;
    options = options != null ? options.split(/\//) : void 0;
    reportViewOptions = {};
    _.each(options, function(option, index) {
      if (!(index % 2)) {
        return reportViewOptions[option] = options[index + 1];
      }
    });
    if ((_ref = Coconut.reportView) == null) {
      Coconut.reportView = new DashboardView();
    }
    return Coconut.reportView.render(reportViewOptions);
  };

  return Router;

})(Backbone.Router);

Coconut = {};

Coconut.router = new Router();

Backbone.history.start();

Coconut.debug = function(string) {
  console.log(string);
  return $("#log").append(string + "<br/>");
};
