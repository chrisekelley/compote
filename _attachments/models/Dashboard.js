// Generated by CoffeeScript 1.4.0
var Dashboard,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Dashboard = (function(_super) {

  __extends(Dashboard, _super);

  function Dashboard() {
    return Dashboard.__super__.constructor.apply(this, arguments);
  }

  Dashboard.prototype.url = "/result";

  Dashboard.prototype.question = function() {
    return this.get("question");
  };

  Dashboard.prototype.tags = function() {
    var tags;
    tags = this.get("Tags");
    if (tags != null) {
      return tags.split(/, */);
    }
    return [];
  };

  Dashboard.prototype.complete = function() {
    var complete;
    if (_.include(this.tags(), "complete")) {
      return true;
    }
    complete = this.get("complete");
    if (typeof complete === "undefined") {
      complete = this.get("Complete");
    }
    if (complete === null || typeof complete === "undefined") {
      return false;
    }
    if (complete === true || complete.match(/true|yes/)) {
      return true;
    }
  };

  Dashboard.prototype.shortString = function() {
    var result;
    result = this.string;
    if (result.length > 40) {
      return result.substring(0, 40) + "...";
    } else {
      return result;
    }
  };

  Dashboard.prototype.summaryKeys = function(question) {
    var relevantKeys;
    relevantKeys = question.summaryFieldKeys();
    if (relevantKeys.length === 0) {
      relevantKeys = _.difference(_.keys(this.toJSON()), ["_id", "_rev", "complete", "question", "collection"]);
    }
    return relevantKeys;
  };

  Dashboard.prototype.summaryValues = function(question) {
    var _this = this;
    return _.map(this.summaryKeys(question), function(key) {
      var returnVal;
      returnVal = _this.get(key) || "";
      if (typeof returnVal === "object") {
        returnVal = JSON.stringify(returnVal);
      }
      return returnVal;
    });
  };

  Dashboard.prototype.get = function(attribute) {
    var original;
    original = Dashboard.__super__.get.call(this, attribute);
    return original;
  };

  Dashboard.prototype.toJSON = function() {
    var json,
      _this = this;
    json = Dashboard.__super__.toJSON.call(this);
    if (Coconut.config.local.get("mode") === "cloud") {
      _.each(json, function(value, key) {
        if ((value != null) && _.contains(_this.identifyingAttributes, key)) {
          return json[key] = b64_sha1(value);
        }
      });
    }
    return json;
  };

  Dashboard.prototype.save = function(key, value, options) {
    this.set({
      user: $.cookie('current_user'),
      lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
    });
    return Dashboard.__super__.save.call(this, key, value, options);
  };

  return Dashboard;

})(Backbone.Model);
